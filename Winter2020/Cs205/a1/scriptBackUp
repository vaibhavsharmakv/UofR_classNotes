var slider;
var stars = [];
var currentNumberOfStars ;
var numberOfStars;



 function setup(){
 	createCanvas(window.innerWidth, window.innerHeight);
 	

 	slider = createSlider(0, 200, 50)
  	slider.position(500, 10)


  	numberOfStars =slider.value();
  	currentNumberOfStars = numberOfStars;
 	for(let i = 0; i< numberOfStars;i++){
 		stars.push(new Star())
 	}
  	
 }

 

 function draw(){
 	background(155,100,144);
 	
  	currentNumberOfStars = slider.value();
 	if (numberOfStars != currentNumberOfStars) {

 		numberOfStars = newStars();
 	}

 	stars.forEach((s,index)=>{
 		s.movement();
 		s.make();
 		s.connectStars(stars.slice(index));
 	});

 	
 	
 }

function newStars(){
 	
 	
	empty();

	var numberOfStars =slider.value();
 	for(let i = 0; i< numberOfStars;i++){
 		stars.push(new Star())
 	}
 	
 	numberOfStars = slider.value();
 	return numberOfStars;
 	

 }


 function empty() {
    stars = [];
}



 class Star{
 	constructor(){
 		this.pos = createVector(random(width), random(height));
 		this.size = 10;
 		this.radius1 = 3;
 		this.radius2 = 7;
 		this.npoints = 5;
 		this.move = createVector(random(-2,2), random(-2,2));
 	}
 	make(){
 		noStroke();
 		fill('rgba(255,255,255,0.5)')
 		starShape(this.pos.x, this.pos.y,this.radius1, this.radius2, this.npoints);

 	}
 	movement(){
 		this.pos.add(this.move);
 		this.boundries();
 	}

 	boundries(){
 		if(this.pos.x<0 || this.pos.x>width){
 			this.move.x *= -1;
 		}
 		if(this.pos.y<0 || this.pos.y>height){
 			this.move.y *= -1;
 		}
 		
 	}

 	

 	connectStars(stars){
 		
 		stars.forEach(star =>{
 			const distance  = dist(this.pos.x, this.pos.y, star.pos.x,star.pos.y);

 			if(distance< 111){
 				stroke("rgba(255,255,255, 0.1)");
 				line(this.pos.x, this.pos.y, star.pos.x,star.pos.y);
 			}

 		});

 	}

 }

function starShape(x, y, radius1, radius2, npoints) {
	  let angle = TWO_PI / npoints;
	  let halfAngle = angle / 2.0;
	  beginShape();
	  for (let a = 0; a < TWO_PI; a += angle) {
	    let sx = x + cos(a) * radius2;
	    let sy = y + sin(a) * radius2;
	    vertex(sx, sy);
	    sx = x + cos(a + halfAngle) * radius1;
	    sy = y + sin(a + halfAngle) * radius1;
	    vertex(sx, sy);
	  }
	  endShape(CLOSE);
}






